generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  BUYER
  SELLER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  name      String?
  password  String
  role      Role        @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  shops     ShopUser[]
  sessions  Session[]
  orders    Order[]
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id         String         @id @default(cuid())
  name       String
  products   Product[]
  users      ShopUser[]
  suppliers  ShopSupplier[]
  orders     Order[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model ShopUser {
  id        String      @id @default(cuid())
  shopId    String
  shop      Shop        @relation(fields: [shopId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  role      Role        @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([shopId, userId])
}

model Product {
  id         String      @id @default(cuid())
  name       String
  price      Int
  stock      Int         @default(0)
  shopId     String
  shop       Shop        @relation(fields: [shopId], references: [id])
  supplierId String
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Supplier {
  id        String         @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  products  Product[]
  shops     ShopSupplier[]
  orders    Order[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ShopSupplier {
  id         String   @id @default(cuid())
  shopId     String
  shop       Shop     @relation(fields: [shopId], references: [id])
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([shopId, supplierId])
}

model Order {
  id         String      @id @default(cuid())
  orderItems OrderItem[]
  totalAmount Int
  status     OrderStatus @default(PENDING)
  shopId     String
  shop       Shop        @relation(fields: [shopId], references: [id])
  supplierId String
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Int      // Price at the time of order
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
